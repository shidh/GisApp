package org.grid2osm.gisapp;

import org.grid2osm.gisapp.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table POI_ENTITY.
 */
public class PoiEntity {

    private Long id;
    private Boolean done;
    private long poiEntitiesId;
    private long locationEntitiesId;
    private long photoEntitiesId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PoiEntityDao myDao;

    private LocationEntities locationEntities;
    private Long locationEntities__resolvedKey;

    private PhotoEntities photoEntities;
    private Long photoEntities__resolvedKey;


    public PoiEntity() {
    }

    public PoiEntity(Long id) {
        this.id = id;
    }

    public PoiEntity(Long id, Boolean done, long poiEntitiesId, long locationEntitiesId, long photoEntitiesId) {
        this.id = id;
        this.done = done;
        this.poiEntitiesId = poiEntitiesId;
        this.locationEntitiesId = locationEntitiesId;
        this.photoEntitiesId = photoEntitiesId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPoiEntityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Boolean getDone() {
        return done;
    }

    public void setDone(Boolean done) {
        this.done = done;
    }

    public long getPoiEntitiesId() {
        return poiEntitiesId;
    }

    public void setPoiEntitiesId(long poiEntitiesId) {
        this.poiEntitiesId = poiEntitiesId;
    }

    public long getLocationEntitiesId() {
        return locationEntitiesId;
    }

    public void setLocationEntitiesId(long locationEntitiesId) {
        this.locationEntitiesId = locationEntitiesId;
    }

    public long getPhotoEntitiesId() {
        return photoEntitiesId;
    }

    public void setPhotoEntitiesId(long photoEntitiesId) {
        this.photoEntitiesId = photoEntitiesId;
    }

    /** To-one relationship, resolved on first access. */
    public LocationEntities getLocationEntities() {
        long __key = this.locationEntitiesId;
        if (locationEntities__resolvedKey == null || !locationEntities__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LocationEntitiesDao targetDao = daoSession.getLocationEntitiesDao();
            LocationEntities locationEntitiesNew = targetDao.load(__key);
            synchronized (this) {
                locationEntities = locationEntitiesNew;
            	locationEntities__resolvedKey = __key;
            }
        }
        return locationEntities;
    }

    public void setLocationEntities(LocationEntities locationEntities) {
        if (locationEntities == null) {
            throw new DaoException("To-one property 'locationEntitiesId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.locationEntities = locationEntities;
            locationEntitiesId = locationEntities.getId();
            locationEntities__resolvedKey = locationEntitiesId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PhotoEntities getPhotoEntities() {
        long __key = this.photoEntitiesId;
        if (photoEntities__resolvedKey == null || !photoEntities__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PhotoEntitiesDao targetDao = daoSession.getPhotoEntitiesDao();
            PhotoEntities photoEntitiesNew = targetDao.load(__key);
            synchronized (this) {
                photoEntities = photoEntitiesNew;
            	photoEntities__resolvedKey = __key;
            }
        }
        return photoEntities;
    }

    public void setPhotoEntities(PhotoEntities photoEntities) {
        if (photoEntities == null) {
            throw new DaoException("To-one property 'photoEntitiesId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.photoEntities = photoEntities;
            photoEntitiesId = photoEntities.getId();
            photoEntities__resolvedKey = photoEntitiesId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

package org.grid2osm.gisapp;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.grid2osm.gisapp.PrimitiveAttributesEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRIMITIVE_ATTRIBUTES_ENTITY.
*/
public class PrimitiveAttributesEntityDao extends AbstractDao<PrimitiveAttributesEntity, Long> {

    public static final String TABLENAME = "PRIMITIVE_ATTRIBUTES_ENTITY";

    /**
     * Properties of entity PrimitiveAttributesEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AccountPickerIsOpen = new Property(1, Boolean.class, "accountPickerIsOpen", false, "ACCOUNT_PICKER_IS_OPEN");
        public final static Property AccumulatedTransferSize = new Property(2, Long.class, "accumulatedTransferSize", false, "ACCUMULATED_TRANSFER_SIZE");
        public final static Property GesturesEnabled = new Property(3, Boolean.class, "gesturesEnabled", false, "GESTURES_ENABLED");
        public final static Property GMail = new Property(4, String.class, "gMail", false, "G_MAIL");
        public final static Property GToken = new Property(5, String.class, "gToken", false, "G_TOKEN");
        public final static Property ImageViewIndex = new Property(6, Integer.class, "imageViewIndex", false, "IMAGE_VIEW_INDEX");
        public final static Property LocationTraceEnabled = new Property(7, Boolean.class, "locationTraceEnabled", false, "LOCATION_TRACE_ENABLED");
        public final static Property PhotoFilePath = new Property(8, String.class, "photoFilePath", false, "PHOTO_FILE_PATH");
        public final static Property ProgressBar = new Property(9, Integer.class, "progressBar", false, "PROGRESS_BAR");
        public final static Property ProgressCircle = new Property(10, Integer.class, "progressCircle", false, "PROGRESS_CIRCLE");
        public final static Property ResumeSend = new Property(11, Boolean.class, "resumeSend", false, "RESUME_SEND");
        public final static Property TakeAnotherPhoto = new Property(12, Boolean.class, "takeAnotherPhoto", false, "TAKE_ANOTHER_PHOTO");
        public final static Property TotalTransferSize = new Property(13, Long.class, "totalTransferSize", false, "TOTAL_TRANSFER_SIZE");
    };


    public PrimitiveAttributesEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PrimitiveAttributesEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRIMITIVE_ATTRIBUTES_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ACCOUNT_PICKER_IS_OPEN' INTEGER," + // 1: accountPickerIsOpen
                "'ACCUMULATED_TRANSFER_SIZE' INTEGER," + // 2: accumulatedTransferSize
                "'GESTURES_ENABLED' INTEGER," + // 3: gesturesEnabled
                "'G_MAIL' TEXT," + // 4: gMail
                "'G_TOKEN' TEXT," + // 5: gToken
                "'IMAGE_VIEW_INDEX' INTEGER," + // 6: imageViewIndex
                "'LOCATION_TRACE_ENABLED' INTEGER," + // 7: locationTraceEnabled
                "'PHOTO_FILE_PATH' TEXT," + // 8: photoFilePath
                "'PROGRESS_BAR' INTEGER," + // 9: progressBar
                "'PROGRESS_CIRCLE' INTEGER," + // 10: progressCircle
                "'RESUME_SEND' INTEGER," + // 11: resumeSend
                "'TAKE_ANOTHER_PHOTO' INTEGER," + // 12: takeAnotherPhoto
                "'TOTAL_TRANSFER_SIZE' INTEGER);"); // 13: totalTransferSize
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRIMITIVE_ATTRIBUTES_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PrimitiveAttributesEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean accountPickerIsOpen = entity.getAccountPickerIsOpen();
        if (accountPickerIsOpen != null) {
            stmt.bindLong(2, accountPickerIsOpen ? 1l: 0l);
        }
 
        Long accumulatedTransferSize = entity.getAccumulatedTransferSize();
        if (accumulatedTransferSize != null) {
            stmt.bindLong(3, accumulatedTransferSize);
        }
 
        Boolean gesturesEnabled = entity.getGesturesEnabled();
        if (gesturesEnabled != null) {
            stmt.bindLong(4, gesturesEnabled ? 1l: 0l);
        }
 
        String gMail = entity.getGMail();
        if (gMail != null) {
            stmt.bindString(5, gMail);
        }
 
        String gToken = entity.getGToken();
        if (gToken != null) {
            stmt.bindString(6, gToken);
        }
 
        Integer imageViewIndex = entity.getImageViewIndex();
        if (imageViewIndex != null) {
            stmt.bindLong(7, imageViewIndex);
        }
 
        Boolean locationTraceEnabled = entity.getLocationTraceEnabled();
        if (locationTraceEnabled != null) {
            stmt.bindLong(8, locationTraceEnabled ? 1l: 0l);
        }
 
        String photoFilePath = entity.getPhotoFilePath();
        if (photoFilePath != null) {
            stmt.bindString(9, photoFilePath);
        }
 
        Integer progressBar = entity.getProgressBar();
        if (progressBar != null) {
            stmt.bindLong(10, progressBar);
        }
 
        Integer progressCircle = entity.getProgressCircle();
        if (progressCircle != null) {
            stmt.bindLong(11, progressCircle);
        }
 
        Boolean resumeSend = entity.getResumeSend();
        if (resumeSend != null) {
            stmt.bindLong(12, resumeSend ? 1l: 0l);
        }
 
        Boolean takeAnotherPhoto = entity.getTakeAnotherPhoto();
        if (takeAnotherPhoto != null) {
            stmt.bindLong(13, takeAnotherPhoto ? 1l: 0l);
        }
 
        Long totalTransferSize = entity.getTotalTransferSize();
        if (totalTransferSize != null) {
            stmt.bindLong(14, totalTransferSize);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PrimitiveAttributesEntity readEntity(Cursor cursor, int offset) {
        PrimitiveAttributesEntity entity = new PrimitiveAttributesEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // accountPickerIsOpen
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // accumulatedTransferSize
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // gesturesEnabled
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gMail
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gToken
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // imageViewIndex
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // locationTraceEnabled
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // photoFilePath
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // progressBar
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // progressCircle
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // resumeSend
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // takeAnotherPhoto
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13) // totalTransferSize
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PrimitiveAttributesEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccountPickerIsOpen(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setAccumulatedTransferSize(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setGesturesEnabled(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setGMail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGToken(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImageViewIndex(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setLocationTraceEnabled(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setPhotoFilePath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setProgressBar(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setProgressCircle(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setResumeSend(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setTakeAnotherPhoto(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setTotalTransferSize(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PrimitiveAttributesEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PrimitiveAttributesEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

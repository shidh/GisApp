package org.grid2osm.gisapp;

import org.grid2osm.gisapp.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table POI_ENTITY.
 */
public class PoiEntity {

    private Long id;
    private Boolean done;
    private long locationTraceEntityId;
    private long photosEntityId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PoiEntityDao myDao;

    private LocationTraceEntity locationTraceEntity;
    private Long locationTraceEntity__resolvedKey;

    private PhotosEntity photosEntity;
    private Long photosEntity__resolvedKey;


    public PoiEntity() {
    }

    public PoiEntity(Long id) {
        this.id = id;
    }

    public PoiEntity(Long id, Boolean done, long locationTraceEntityId, long photosEntityId) {
        this.id = id;
        this.done = done;
        this.locationTraceEntityId = locationTraceEntityId;
        this.photosEntityId = photosEntityId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPoiEntityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Boolean getDone() {
        return done;
    }

    public void setDone(Boolean done) {
        this.done = done;
    }

    public long getLocationTraceEntityId() {
        return locationTraceEntityId;
    }

    public void setLocationTraceEntityId(long locationTraceEntityId) {
        this.locationTraceEntityId = locationTraceEntityId;
    }

    public long getPhotosEntityId() {
        return photosEntityId;
    }

    public void setPhotosEntityId(long photosEntityId) {
        this.photosEntityId = photosEntityId;
    }

    /** To-one relationship, resolved on first access. */
    public LocationTraceEntity getLocationTraceEntity() {
        long __key = this.locationTraceEntityId;
        if (locationTraceEntity__resolvedKey == null || !locationTraceEntity__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LocationTraceEntityDao targetDao = daoSession.getLocationTraceEntityDao();
            LocationTraceEntity locationTraceEntityNew = targetDao.load(__key);
            synchronized (this) {
                locationTraceEntity = locationTraceEntityNew;
            	locationTraceEntity__resolvedKey = __key;
            }
        }
        return locationTraceEntity;
    }

    public void setLocationTraceEntity(LocationTraceEntity locationTraceEntity) {
        if (locationTraceEntity == null) {
            throw new DaoException("To-one property 'locationTraceEntityId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.locationTraceEntity = locationTraceEntity;
            locationTraceEntityId = locationTraceEntity.getId();
            locationTraceEntity__resolvedKey = locationTraceEntityId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PhotosEntity getPhotosEntity() {
        long __key = this.photosEntityId;
        if (photosEntity__resolvedKey == null || !photosEntity__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PhotosEntityDao targetDao = daoSession.getPhotosEntityDao();
            PhotosEntity photosEntityNew = targetDao.load(__key);
            synchronized (this) {
                photosEntity = photosEntityNew;
            	photosEntity__resolvedKey = __key;
            }
        }
        return photosEntity;
    }

    public void setPhotosEntity(PhotosEntity photosEntity) {
        if (photosEntity == null) {
            throw new DaoException("To-one property 'photosEntityId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.photosEntity = photosEntity;
            photosEntityId = photosEntity.getId();
            photosEntity__resolvedKey = photosEntityId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
